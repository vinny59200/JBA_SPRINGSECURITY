type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/management/exceptions/BusinessException.java
  visible: true
  text: |
    package account.management.exceptions;

    public class BusinessException extends  Exception {
        public BusinessException(String s) {
            super(s);
        }
    }
  learner_created: true
- name: src/account/CustomAccessDeniedHandler.java
  visible: true
  text: |
    package account;

    import account.management.exceptions.CustomErrorResponse;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.time.LocalDateTime;
    import javax.json.Json;
    import javax.json.JsonObject;

    @Slf4j
    public class CustomAccessDeniedHandler implements AccessDeniedHandler {
        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response,
                           AccessDeniedException e) throws IOException, ServletException {
    //        response.getWriter().write( "Access Denied!");
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            log.error("pb Access Denied:"+e.getMessage()+" "+request.getRequestURI());
            CustomErrorResponse error = new CustomErrorResponse();
            error.setPath(request.getRequestURI());
            error.setError( "Forbidden");
            error.setStatus(403);
            error.setMessage("Access Denied!");
            error.setTimestamp(LocalDateTime.now());


            PrintWriter out = response.getWriter();
            ObjectMapper objectMapper= new ObjectMapper();
            String jsonString = objectMapper.writeValueAsString(error);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            out.print(jsonString);
            out.flush();

        }
    }
  learner_created: true
- name: src/account/management/entities/Payment.java
  visible: true
  text: |
    package account.management.entities;

    import javax.persistence.Id;
    import lombok.*;
    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import java.sql.Date;

    @Getter
    @Setter
    @ToString
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    @Entity(name = "payment")
    public class Payment {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id", nullable = false)
        private Long id;

        @ManyToOne(targetEntity = User.class,fetch = FetchType.EAGER)
        private User user;

        @Column
        private Date period;

        @NotNull
        @Column
        private Long  salary;

    }
  learner_created: true
- name: src/account/management/service/UserService.java
  visible: true
  text: |
    package account.management.service;


    import account.management.dtos.*;
    import account.management.exceptions.BusinessException;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;

    import java.util.List;


    public interface UserService extends UserDetailsService {

        UserLightDTO signUp(UserDTO request) throws BusinessException;

        List<PaymentExtractDTO> getPayment(UserDetails request,String period) throws BusinessException;

        SuccessfulPasswordChangeDTO changePass(PasswordDTO request) throws BusinessException;

        StatusDTO createPayment(List<PaymentDTO> request);

        List<UserLightDTO> findAll() throws BusinessException;

        UserStatusDTO delete(String username) throws BusinessException;

        UserLightDTO updateRole(RoleOperationDTO request) throws BusinessException;
    }
  learner_created: true
- name: src/account/management/PeriodValidator.java
  visible: true
  text: |-
    package account.management;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.Date;

    public class PeriodValidator implements
            ConstraintValidator<PeriodValidation, String> {

        public void initialize(PeriodValidator constraintAnnotation) {
        }

        @Override
        public boolean isValid(String strDate, ConstraintValidatorContext context) {
            if (strDate == null || strDate.trim().equals("")) {
                return false;
            } else {
                SimpleDateFormat format = new SimpleDateFormat("MM-yyyy");
                format.setLenient(false);
                try {
                    Date javaDate = format.parse(strDate);
                    System.out.println(strDate + " is valid date format");
                }
                catch (ParseException e) {
                    System.out.println(strDate + " is Invalid Date format");
                    return false;
                }
                return true;
            }
        }
    }
  learner_created: true
- name: src/account/management/dtos/RoleOperationDTO.java
  visible: true
  text: |
    package account.management.dtos;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class RoleOperationDTO {

        @JsonProperty("user")
        private String user;

        @JsonProperty("role")
        private String role;

        @JsonProperty("operation")
        private RoleOperation operation;
    }
  learner_created: true
- name: src/account/management/dtos/UserStatusDTO.java
  visible: true
  text: |
    package account.management.dtos;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class UserStatusDTO {
        @JsonProperty("user")
        private String user;

        @JsonProperty("status")
        private String status;
    }
  learner_created: true
- name: src/account/management/exceptions/PasswordLengthInfringedException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
    public class PasswordLengthInfringedException extends RuntimeException { }
  learner_created: true
- name: src/account/management/dtos/StatusDTO.java
  visible: true
  text: |
    package account.management.dtos;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class StatusDTO {

        @JsonProperty("status")
        private String status;
    }
  learner_created: true
- name: src/account/Security.java
  visible: true
  text: |
    package account;

    import account.management.service.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @EnableWebSecurity
    @Configuration
    public class Security extends WebSecurityConfigurerAdapter {
        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        UserService userService;



        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.authenticationProvider(daoAuthenticationProvider());
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.$2Y);
        }

        @Override
        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .and()
                    .exceptionHandling()// Handle auth error
                    .authenticationEntryPoint(restAuthenticationEntryPoint)
                    .accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                    .antMatchers(HttpMethod.DELETE, "/api/admin/user/**").hasRole("ADMINISTRATOR")
                    .antMatchers(HttpMethod.PUT, "/api/admin/user/**").hasRole("ADMINISTRATOR")
                    .antMatchers(HttpMethod.GET, "/api/admin/user/**").hasRole("ADMINISTRATOR")
                    .antMatchers(HttpMethod.POST, "/api/acct/payments/**").hasAnyRole( "ACCOUNTANT")
                    .antMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyRole("USER", "ACCOUNTANT")
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public DaoAuthenticationProvider daoAuthenticationProvider(){
            DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
            daoAuthenticationProvider.setPasswordEncoder(getEncoder());
            daoAuthenticationProvider.setUserDetailsService(userService);
            return daoAuthenticationProvider;
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler(){
            return new CustomAccessDeniedHandler();
        }



    }
  learner_created: true
- name: src/account/management/exceptions/RoleOperationNotFoundException.java
  visible: true
  text: |+
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Role not found!")
    public class RoleOperationNotFoundException extends RuntimeException {
        public RoleOperationNotFoundException(String role_not_found) {
            super(role_not_found);
        }
    }

  learner_created: true
- name: src/account/management/controller/PaymentController.java
  visible: true
  text: |
    package account.management.controller;

    import account.management.dtos.PaymentDTO;
    import account.management.exceptions.BusinessException;
    import account.management.exceptions.CustomErrorResponse;
    import account.management.service.PaymentService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import java.time.LocalDateTime;
    import java.util.*;

    @Slf4j
    @RestController
    public class PaymentController {

        private @Autowired
        PaymentService paymentService;

        @PostMapping("/api/acct/payments")
        @PreAuthorize("hasAnyRole('ACCOUNTANT')")
        public ResponseEntity createPayments(@RequestBody(required = false) List<PaymentDTO> request ){
            try {
                log.info("Upload Payment Parameter: {}", request.toString());
                paymentService.createPayments(request);
                return new ResponseEntity<>(Map.of("status", "Added successfully!"), HttpStatus.OK);
            }   catch (BusinessException e) {
                log.error("pb createPayments:"+e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/acct/payments");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

        @PutMapping("api/acct/payments")
        public ResponseEntity changeSalary(@RequestBody PaymentDTO payment) {
            try {
                log.info("Change Payment Parameter: {}", payment.toString());
                paymentService.update(payment);
                return new ResponseEntity<>(Map.of("status", "Updated successfully!"), HttpStatus.OK);
            }   catch (BusinessException e) {
                log.error("pb changeSalary:"+e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/acct/payments");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }
    //
    //    @GetMapping("api/empl/payment")
    //    public ResponseEntity payment(@AuthenticationPrincipal UserDetailsImpl details, @RequestParam(required = false) String period) {
    //        if (details == null) {
    //            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);
    //        }
    //        log.info("Get Payments Parameter: {}", details.getEmail());
    //
    //        List<PaymentResponse> result = paymentService.queryBy(details.getEmail(), period);
    //        if (result.size() == 1) {
    //            return new ResponseEntity<>(result.get(0), HttpStatus.OK);
    //        }
    //        return new ResponseEntity<>(result, HttpStatus.OK);
    //    }
    }
  learner_created: true
- name: src/account/management/entities/StringListConverter.java
  visible: true
  text: |-
    package account.management.entities;

    import java.util.Arrays;
    import java.util.List;

    import javax.persistence.AttributeConverter;
    import javax.persistence.Converter;

    import static java.util.Collections.*;

    @Converter
    public class StringListConverter implements AttributeConverter<List<String>, String> {
        private static final String SPLIT_CHAR = ";";

        @Override
        public String convertToDatabaseColumn(List<String> stringList) {
            return stringList != null ? String.join(SPLIT_CHAR, stringList) : "";
        }

        @Override
        public List<String> convertToEntityAttribute(String string) {
            return string != null ? Arrays.asList(string.split(SPLIT_CHAR)) : emptyList();
        }
    }
  learner_created: true
- name: src/account/management/dtos/PaymentExtractDTO.java
  visible: true
  text: |
    package account.management.dtos;


    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;


    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class PaymentExtractDTO {

        @JsonProperty("name")
        private String name;

        @JsonProperty("lastname")
        private String lastname;

        @JsonProperty("period")
        private String period;

        @JsonProperty("salary")
        private String salary;
    }
  learner_created: true
- name: src/account/management/exceptions/UserNotFoundException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "User not found!")
    public class UserNotFoundException extends RuntimeException {
            public UserNotFoundException(String user_not_found) {
                    super(user_not_found);
            }
    }
  learner_created: true
- name: src/account/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account;

    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }


    }
  learner_created: true
- name: src/account/management/PeriodValidation.java
  visible: true
  text: |
    package account.management;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;
    import java.lang.annotation.Target;

    @Constraint(validatedBy = PeriodValidator.class)
    @Target( {ElementType.FIELD, ElementType.PARAMETER})
    @Retention(RetentionPolicy.RUNTIME)
    public @interface PeriodValidation {
        String message() default "Wrong date!";
        Class<?>[] groups() default {};
        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/management/exceptions/RoleNotFoundException.java
  visible: true
  text: |+
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Role not found!")
    public class RoleNotFoundException extends RuntimeException {
        public RoleNotFoundException(String role_not_found) {
            super(role_not_found);
        }
    }

  learner_created: true
- name: src/account/management/service/PaymentService.java
  visible: true
  text: |
    package account.management.service;

    import account.management.dtos.PaymentDTO;
    import account.management.exceptions.BusinessException;

    import java.util.List;

    public interface PaymentService {
        void createPayments(List<PaymentDTO> request) throws BusinessException;

        void update(PaymentDTO payment) throws BusinessException;
    }
  learner_created: true
- name: src/account/management/controller/UserController.java
  visible: true
  text: |
    package account.management.controller;

    import account.management.dtos.*;
    import account.management.exceptions.*;
    import account.management.service.UserService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import java.time.LocalDateTime;
    import java.util.List;

    @Slf4j
    @RestController
    public class UserController {

        @Autowired
        private UserService userService;

        @PostMapping("/api/auth/signup")
        @CrossOrigin(origins = "http://localhost:28852")
        public ResponseEntity signUp(@RequestBody UserDTO request) {

            try {
                log.error("signUp");
                return ResponseEntity.ok(userService.signUp(request));
            }   catch (BusinessException e) {
                log.error("pb signup:"+e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

        @GetMapping("/api/empl/payment")
        @PreAuthorize("hasAnyRole('USER','ACCOUNTANT')")
        @CrossOrigin(origins = "http://localhost:28852")
        public ResponseEntity getPayment(@AuthenticationPrincipal UserDetails request,
                                         @RequestParam(required = false)
                                                 String period) {
            try {
                log.info("getPayment");
                List<PaymentExtractDTO> result = userService.getPayment(request, period);
                if (result.size() == 1) return ResponseEntity.ok(result.get(0));
                return ResponseEntity.ok(result);
            } catch (Exception e) {
                log.error("pb getPayment:" + e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/empl/payment");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

        @PostMapping("/api/auth/changepass")
        @CrossOrigin(origins = "http://localhost:28852")
        public ResponseEntity changePass(@RequestBody PasswordDTO request) {

            try {
                log.error("signUp");
                return ResponseEntity.ok(userService.changePass(request));
            }   catch (BusinessException e) {
                log.error("pb signup:"+e.getMessage());
                return ResponseEntity.badRequest().body(e.getMessage());
            }
        }

    //    @PostMapping("/api/empl/payment")
    //    @CrossOrigin(origins = "http://localhost:28852")
    //    public ResponseEntity createPayment(@AuthenticationPrincipal List<PaymentDTO> request) {
    //        try {
    //            log.info("getPayment");
    //            return ResponseEntity.ok(userService.createPayment(request));
    //        }   catch (Exception e) {
    //            log.error("pb getPayment:"+e.getMessage());
    //            return ResponseEntity.badRequest().body(e.getMessage());
    //        }
    //    }

    }
  learner_created: true
- name: src/account/management/exceptions/PasswordSameException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class PasswordSameException extends RuntimeException { }
  learner_created: true
- name: src/account/management/service/impl/UserServiceImpl.java
  visible: true
  text: |+
    package account.management.service.impl;

    import account.management.entities.User;
    import account.management.dtos.*;
    import account.management.exceptions.*;
    import account.management.exceptions.BusinessException;
    import account.management.exceptions.UserExistException;
    import account.management.repository.PaymentRepository;
    import account.management.repository.UserRepository;
    import account.management.service.UserService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.sql.Date;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.*;
    import java.util.stream.Collectors;

    import static java.util.Objects.isNull;

    @Slf4j
    @Service
    public class UserServiceImpl implements UserService {

        @Autowired
        private UserRepository userRepository;

        @Autowired
        private PaymentRepository paymentRepository;

        @Autowired
        private final PasswordEncoder encoder;

        public UserServiceImpl(UserRepository userRepository, PasswordEncoder encoder) {
            this.userRepository = userRepository;
            this.encoder = encoder;
        }


        @Override
        public UserLightDTO signUp(UserDTO request) throws BusinessException {

            log.error("VV request: {}", request);

            if (request.getPassword() == null ||
                    request.getPassword().isEmpty()) throw new BusinessException("Password must not be empty");

            checkBreachPasswords(request.getPassword());

            if (request.getName() == null ||
                    request.getName().isEmpty()) throw new BusinessException("Name must not be empty");

            if (request.getLastname() == null ||
                    request.getLastname().isEmpty()) throw new BusinessException("Lastname must not be empty");

            if (request.getEmail() == null ||
                    request.getEmail().isEmpty()) throw new BusinessException("Email must not be empty");

            if (!request.getEmail().endsWith("@acme.com")) throw new BusinessException("Email must end with @acme.com");

            if (userRepository.existsByEmail(request.getEmail())) throw new UserExistException();

            User user = userRepository.save(
                    User.builder()
                            .name(request.getName())
                            .lastname(request.getLastname())
                            .email(request.getEmail().toLowerCase(Locale.ROOT))
                            .password(encoder.encode(request.getPassword()))
                            .roles(getRole()).build()
            );

            return UserLightDTO.builder()
                    .id(user.getId())
                    .name(request.getName())
                    .lastname(request.getLastname())
                    .email(request.getEmail())
                    .roles(user.getRoles())
                    .build();
        }

        private List<String> getRole() {
            return userRepository.findAll().stream().count() > 0 ? Arrays.asList("ROLE_USER") : Arrays.asList("ROLE_ADMINISTRATOR");
        }

        @Override
        public List<PaymentExtractDTO> getPayment(UserDetails request, String period) throws BusinessException {
            log.error("VV25 request: {}", request.getUsername());
            User user = userRepository.getUserByEmail(request.getUsername());
            if (isNull(period))
                return paymentRepository.findAllByUserIdOrderByPeriodDesc(user.getId())
                        .stream()
                        .map(pay -> PaymentExtractDTO.builder()
                                .name(pay.getUser().getName())
                                .period(custFormatDate(pay.getPeriod()))
                                .salary(custFormatMoney(pay.getSalary()))
                                .lastname(pay.getUser().getLastname()).build()).collect(Collectors.toList());
            else {
                if (stringToDate(period) == null) throw new BusinessException("Date is invalid");
                return paymentRepository.findPaymentByPeriodAndUser_Email(stringToDate(period), user.getEmail())
                        .stream()
                        .map(pay -> PaymentExtractDTO.builder()
                                .name(pay.getUser().getName())
                                .period(custFormatDate(pay.getPeriod()))
                                .salary(custFormatMoney(pay.getSalary()))
                                .lastname(pay.getUser().getLastname()).build()).collect(Collectors.toList());
            }
        }

        private Date stringToDate(String period) {
            SimpleDateFormat format = new SimpleDateFormat("MM-yyyy");
            format.setLenient(false);
            Date javaDate = null;
            try {
                javaDate = new Date(format.parse(period).getTime());
            } catch (ParseException e) {
                System.out.println(period + " is Invalid Date format");
            }
            return javaDate;
        }

        private String custFormatMoney(Long salary) {
            Long dollars = salary / 100;
            Long cents = salary % 100;
            return String.format("%d dollar(s) %d cent(s)", dollars, cents);
        }

        private String custFormatDate(Date period) {
            SimpleDateFormat format = new SimpleDateFormat("MMMM-yyyy", Locale.ENGLISH);
            return format.format(period);
        }

        @Override
        public SuccessfulPasswordChangeDTO changePass(PasswordDTO request) throws BusinessException {

            checkPasswordLength(request.getNewPassword());

            User user = getAndCheckAuthenticatedUser();

            checkBreachPasswords(request.getNewPassword());

            checkIfSamePasswords(request, user);

            log.error("VV9 user: {} {} {} {} {} {}", user.getEmail(), user.getName(), user.getLastname(), user.getId(), "NewPass=", request.getNewPassword());
            userRepository.findById(user.getId()).ifPresent(u -> u.setPassword(encoder.encode(request.getNewPassword())));
            userRepository.save(user);

            return SuccessfulPasswordChangeDTO.builder().email(user.getEmail()).status("The password has been updated successfully").build();
        }

        @Override
        public StatusDTO createPayment(List<PaymentDTO> request) {
            for (PaymentDTO paymentDTO : request) {
                log.error("VV saving: {}", paymentDTO);

            }
            return null;
        }

        @Override
        public List<UserLightDTO> findAll() throws BusinessException {
            log.error("VV36 count:" + userRepository.count());
            List<UserLightDTO> result = userRepository.findAll()
                    .stream()
                    .map(user ->
                            UserLightDTO.builder()
                                    .id(user.getId())
                                    .name(user.getName())
                                    .lastname(user.getLastname())
                                    .email(user.getEmail())
                                    .roles(user.getRoles())
                                    .build()).collect(Collectors.toList());
            result.stream().forEach(user ->
                    log.error("VV36 user: {} {} {} {} {} {}",
                            user.getEmail(),
                            user.getName(),
                            user.getLastname(),
                            user.getId(),
                            "Roles=",
                            user.getRoles()));
            return result;
        }

        @Override
        public UserStatusDTO delete(String username) throws BusinessException {
            log.error("VV delete 1");
            if (userRepository.getUserByEmail(username) == null) throw new UserNotFoundException("User not found!");
            log.error("VV delete 2");
            if (userRepository.getUserByEmail(username).getRoles().contains("ROLE_ADMINISTRATOR"))
                throw new BusinessException("Can't remove ADMINISTRATOR role!");
            log.error("VV delete 3");
            long deleteCount = userRepository.deleteByEmail(username);
            log.error("VV delete 4");
            if (deleteCount > 0) return UserStatusDTO.builder()
                    .user(username)
                    .status("Deleted successfully!")
                    .build();
            else throw new BusinessException("User not found!");
        }

        @Override
        public UserLightDTO updateRole(RoleOperationDTO request) throws BusinessException {
            if (request.getRole().equals("ADMINISTRATOR") && request.getOperation().equals(RoleOperation.REMOVE))
                throw new BusinessException("Can't remove ADMINISTRATOR role!");
            log.error("VV47 operation: {} / {} {}", request.getOperation(), RoleOperation.REMOVE.name(), RoleOperation.GRANT.name());
            log.error("VV47 operation: {}", !Arrays.stream(RoleOperation.values()).anyMatch(r -> r.name().equals(request.getOperation().name())));
            if (!Arrays.stream(RoleOperation.values()).anyMatch(r -> r.name().equals(request.getOperation().name())))
                throw new RoleOperationNotFoundException("Role operation not found!");
            log.error("VV49 request: {}", request);
            User user = userRepository.getUserByEmail(request.getUser());
            if (user == null) throw new UserNotFoundException("User not found!");
            log.error("VV 57 user: {} {} {} {} {} {}", user.getEmail(), user.getName(), user.getLastname(), user.getId(), "Roles=", user.getRoles());
            List<String> newRoles = new ArrayList<>(user.getRoles());
            log.error("VV57 remove: {} in {} ?=> {}", "ROLE_" + request.getRole(), newRoles, newRoles.contains("ROLE_" + request.getRole()));
            if (!newRoles.contains("ROLE_" + request.getRole()) && request.getOperation().equals(RoleOperation.REMOVE))
                throw new BusinessException("The user does not have a role!");
            checkRole(request.getRole());
            if (newRoles.size() == 1 && newRoles.get(0).equals("ROLE_" + request.getRole()) && RoleOperation.REMOVE.equals(request.getOperation()))
                throw new BusinessException("The user must have at least one role!");
            for (String role : user.getRoles()) {
                if (role.substring(5).equals("ADMINISTRATOR") && request.getRole().equals("USER")
                        || role.substring(5).equals("USER") && request.getRole().equals("ADMINISTRATOR"))
                    throw new BusinessException("The user cannot combine administrative and business roles!");
                if (role.substring(5).equals(request.getRole()) && request.getOperation().equals(RoleOperation.REMOVE)) {
                    log.error("VV49 remove: {} {}", role, role.substring(5));
                    newRoles.remove(role);
                } else if (!role.equals(request.getRole()) && request.getOperation().equals(RoleOperation.GRANT)) {
                    log.error("VV49 grant: {} {}", role, "ROLE_" + request.getRole());
                    newRoles.add("ROLE_" + request.getRole());
                }
            }
            newRoles.sort(Comparator.naturalOrder());
            user.setRoles(newRoles);
            userRepository.save(user);
            return UserLightDTO.builder()
                    .id(user.getId())
                    .name(user.getName())
                    .lastname(user.getLastname())
                    .email(user.getEmail())
                    .roles(user.getRoles())
                    .build();
        }

        private void checkRole(String role) {
            if (!role.equals("USER") &&
                    !role.equals("ACCOUNTANT") &&
                    !role.equals("ADMINISTRATOR")) throw new RoleNotFoundException("Role not found!");
        }

        private void checkPasswordLength(String newPass) {
            if (newPass != null && newPass.length() < 12)
                throw new PasswordLengthInfringedException();
        }

        private User getAndCheckAuthenticatedUser() {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth.getName().toLowerCase(Locale.ROOT).startsWith("anonymous")) throw new UserUnauthorizedException();
            final UserDetails userD = (UserDetails) auth.getPrincipal();
            log.error("VV22 user: {} {} {} {} {} {}", userD.getUsername(), userD.getPassword(), userD.getAuthorities(), userD.getAuthorities().toString(), userD.getAuthorities().toArray(), userD.getAuthorities().toArray()[0]);
            User user = userRepository.getUserByEmail(userD.getUsername());
            if (user == null) throw new UserUnauthorizedException();
            return user;
        }

        private void checkIfSamePasswords(PasswordDTO request, User user) {
            BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
            boolean sameEncryptedPass = encoder.matches(request.getNewPassword(), user.getPassword());
            log.error("VV11 sameEncryptedPass: {} for {}", sameEncryptedPass, request.getNewPassword());
            if (sameEncryptedPass) throw new PasswordSameException();
        }

        private void checkBreachPasswords(String newPass) {
            String[] breachedList = {"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

            if (Arrays.toString(breachedList).contains(newPass)) throw new BreachedPasswordException();
        }

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            User user = userRepository.getUserByEmail(email);
            if (user == null) {
                throw new UsernameNotFoundException(email);
            }
            return new UserDetailsImpl(user);
        }
    }

    class UserDetailsImpl implements UserDetails {
        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            username = user.getEmail().toLowerCase(Locale.ROOT);
            password = user.getPassword();
            rolesAndAuthorities = user.getRoles().stream().map( r->new SimpleGrantedAuthority(r)).collect(Collectors.toList());
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        // 4 remaining methods that just return true
        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }


    }


  learner_created: true
- name: src/account/management/dtos/PaymentDTO.java
  visible: true
  text: |
    package account.management.dtos;

    import account.management.PeriodValidation;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.validation.constraints.Email;
    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.Pattern;
    import java.util.Objects;


    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class PaymentDTO {

        @JsonProperty("employee")
        @Pattern(regexp = "[\\w.]+(@acme.com)$", message = "Email must be from acme.com domain")
        @Email(message = "You must enter a valid email")
        @NotBlank(message = "Email must not be null!")
        private String employeeEmail;

        @JsonProperty("period")
        @PeriodValidation
        private String period;

        @JsonProperty("salary")
        @Min(value = 1, message = "Salary must be non negative!")
        private long salary;

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PaymentDTO that = (PaymentDTO) o;
            return Objects.equals(employeeEmail, that.employeeEmail) && Objects.equals(period, that.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employeeEmail);
        }

    }
  learner_created: true
- name: src/account/management/exceptions/CustomErrorResponse.java
  visible: true
  text: |
    package account.management.exceptions;

    import lombok.*;

    import java.time.LocalDateTime;


    @Getter
    @Setter
    @Builder
    @AllArgsConstructor
    @ToString
    @NoArgsConstructor
    public class CustomErrorResponse {
        private LocalDateTime timestamp;
        private int status;
        private String error;
        private String message;
        private String path;

    }
  learner_created: true
- name: src/account/management/dtos/RoleOperation.java
  visible: true
  text: |
    package account.management.dtos;

    public enum RoleOperation {
        GRANT,
        REMOVE
    }
  learner_created: true
- name: src/account/management/exceptions/BreachedPasswordException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPasswordException extends RuntimeException { }
  learner_created: true
- name: src/account/management/exceptions/UserExistException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException { }
  learner_created: true
- name: src/account/management/entities/User.java
  visible: true
  text: |
    package account.management.entities;

    import lombok.*;

    import javax.persistence.Id;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.List;

    @Getter
    @Setter
    @ToString
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    @Entity(name = "user")
    public class User{
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id", nullable = false)
        private Long id;

        @NotNull
        @NotBlank
        @Column
        private String name;

        @NotNull
        @NotBlank
        @Column
        private String lastname;

        @Column
        @Pattern(regexp = "[\\w.]+(@acme.com)$")
        @Email
        private String email;

        @NotNull
        @NotBlank
        @Column
        private String password;

        @NotNull
        @Column
        @Convert(converter = StringListConverter.class)
        private List<String> roles;

    }
  learner_created: true
- name: src/account/management/service/impl/PaymentServiceImpl.java
  visible: true
  text: |
    package account.management.service.impl;

    import account.management.dtos.PaymentDTO;
    import account.management.entities.Payment;
    import account.management.exceptions.BusinessException;
    import account.management.repository.PaymentRepository;
    import account.management.repository.UserRepository;
    import account.management.service.PaymentService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.sql.Date;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.HashSet;
    import java.util.List;
    import java.util.Set;
    import java.util.stream.Collectors;

    @Slf4j
    @Service
    public class PaymentServiceImpl implements PaymentService {

        @Autowired
        private PaymentRepository paymentRepository;
        @Autowired
        private UserRepository userRepository;

        @Override
        public void createPayments(List<PaymentDTO> request) throws BusinessException {

            paymentRepository.saveAll(mapDTOtoEntity(request));
        }

        @Override
        public void update(PaymentDTO payment) throws BusinessException {
            paymentRepository.findPaymentByPeriodAndUser_Email(
                            stringToDate(payment.getPeriod()),
                            payment.getEmployeeEmail())
                    .stream()
                    .forEach(pay -> paymentRepository.delete(pay));
            paymentRepository.save(mapSingleDTOtoEntity(payment));
        }

        private Payment mapSingleDTOtoEntity(PaymentDTO paymentDTO) throws BusinessException {
            if (paymentDTO.getSalary() <0) throw new BusinessException("Salary cannot be negative");
            if (stringToDate(paymentDTO.getPeriod())==null) throw new BusinessException("Date is invalid");
            return Payment.builder()
                    .period(stringToDate(paymentDTO.getPeriod()))
                    .salary(paymentDTO.getSalary())
                    .user(userRepository.getUserByEmail(paymentDTO.getEmployeeEmail())).build();
        }

        private List<Payment> mapDTOtoEntity(List<PaymentDTO> request) throws BusinessException {
            request.stream().forEach(paymentDTO -> {log.error("PaymentDTO: " + paymentDTO);});
            checkSalary(request);
            checkPeriod(request);
            checkDuplicate(request);
            List<Payment> result= request.stream().map(paymentDTO ->
                    Payment.builder()
                            .period(stringToDate(paymentDTO.getPeriod()))
                            .salary(paymentDTO.getSalary())
                            .user(userRepository.getUserByEmail(paymentDTO.getEmployeeEmail())).build())
                    .collect(Collectors.toList());
            result.stream().forEach(paymentDTO -> {log.error("Payment: " + paymentDTO);});
            return result;

        }

        private void checkDuplicate(List<PaymentDTO> potentialDuplicates) throws BusinessException {
            final Set<PaymentDTO> duplicatesFinding = new HashSet<PaymentDTO>();

            for (PaymentDTO potentialDuplicate : potentialDuplicates) {
                if (!duplicatesFinding.add(potentialDuplicate)) {
                    throw new BusinessException("Duplicate found");
                }
            }

        }

        private void checkSalary(List<PaymentDTO> req) throws BusinessException {
            for (PaymentDTO paymentDTO : req) {
                if (paymentDTO.getSalary() <0) throw new BusinessException("Salary cannot be negative");
            }
        }

        private void checkPeriod(List<PaymentDTO> req) throws BusinessException {
            for (PaymentDTO paymentDTO : req) {
                if (stringToDate(paymentDTO.getPeriod())==null) throw new BusinessException("Date is invalid");
            }
        }

        private Date stringToDate(String period) {
            SimpleDateFormat format = new SimpleDateFormat("MM-yyyy");
            format.setLenient(false);
            Date javaDate = null;
            try {
                javaDate = new Date(format.parse(period).getTime());
            } catch (ParseException e) {
                System.out.println(period + " is Invalid Date format");
            }
            return javaDate;
        }
    }
  learner_created: true
- name: src/account/management/repository/UserRepository.java
  visible: true
  text: |
    package account.management.repository;

    import account.management.entities.User;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.data.jpa.repository.JpaRepository;

    import java.util.Locale;


    public interface UserRepository extends JpaRepository<User, Long> {

        default boolean existsByEmail(String email) {
            return this.findAll().stream().anyMatch(user -> user.getEmail().equals(email.toLowerCase()));
        }

        default User getUserByEmail(String email) {
            User result= this.findAll()
                    .stream()
                    .filter(user -> user.getEmail().equals(email.toLowerCase(Locale.ROOT)))
                    .findFirst()
                    .orElse(null);
            if(result!=null)System.out.println("VV65 user: "+result.getEmail()+" + "+result.getRoles());
            return result;
        }

        long deleteByEmail(String username);
    }
  learner_created: true
- name: src/account/management/controller/AdminController.java
  visible: true
  text: |
    package account.management.controller;

    import account.management.dtos.*;
    import account.management.exceptions.BusinessException;
    import account.management.exceptions.CustomErrorResponse;
    import account.management.exceptions.UserNotFoundException;
    import account.management.service.UserService;
    import lombok.extern.slf4j.Slf4j;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.access.prepost.PreAuthorize;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.*;

    import javax.transaction.Transactional;
    import java.beans.Transient;
    import java.time.LocalDateTime;
    import java.util.List;
    import java.util.Map;

    @Slf4j
    @RestController
    public class AdminController {

        @Autowired
        private UserService userService;

        @GetMapping("/api/admin/user")
        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @CrossOrigin(origins = "http://localhost:28852")
        public ResponseEntity getUsers() {
            try {
                log.info("getUsers");
                List<UserLightDTO> result = userService.findAll();
                if (result.size() == 1) return ResponseEntity.ok(result.get(0));
                return ResponseEntity.ok(result);
            } catch (Exception e) {
                log.error("pb getUsers:" + e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/admin/user");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

        @Transactional
        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @DeleteMapping("/api/admin/user/{email}")
        @CrossOrigin(origins = "http://localhost:28852")
        public ResponseEntity deleteUser(@PathVariable("email") String email) {
            try {
                log.info("deleteUser");
                UserStatusDTO result = userService.delete(email);
                return ResponseEntity.ok(result);
            } catch (UserNotFoundException e) {
                log.error("pb deleteUser 1:" + e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/admin/user/" + email);
                error.setError("Not Found");
                error.setStatus(404);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
            } catch (Exception e) {
                log.error("pb deleteUser 2:" + e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/admin/user/" + email);
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }
        @Transactional
        @PreAuthorize("hasRole('ADMINISTRATOR')")
        @PutMapping("/api/admin/user/role")
        public ResponseEntity modifyRole(@RequestBody RoleOperationDTO operation) {
            try {
                log.info("Change role Parameter: {}", operation.toString());
                return new ResponseEntity<>(userService.updateRole(operation), HttpStatus.OK);
            }   catch (BusinessException e) {
                log.error("pb modifyRole:"+e.getMessage());
                CustomErrorResponse error = new CustomErrorResponse();
                error.setPath("/api/admin/user/role");
                error.setError("Bad Request");
                error.setStatus(400);
                error.setMessage(e.getMessage());
                error.setTimestamp(LocalDateTime.now());
                return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
            }
        }

    }
  learner_created: true
- name: src/account/management/exceptions/UserUnauthorizedException.java
  visible: true
  text: |-
    package account.management.exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.UNAUTHORIZED, reason = "User not found!")
    public class UserUnauthorizedException extends RuntimeException { }
  learner_created: true
- name: src/account/management/EventLogger.java
  visible: true
  learner_created: true
- name: src/account/management/service/impl/EventServiceImpl.java
  visible: true
  learner_created: true
- name: src/account/management/service/EventService.java
  visible: true
  learner_created: true
- name: src/account/management/repository/EventRepository.java
  visible: true
  learner_created: true
- name: src/account/management/entities/Event.java
  visible: true
  learner_created: true
- name: src/account/management/entities/EventAction.java
  visible: true
  learner_created: true
- name: src/account/management/exceptions/InvalidEventLogException.java
  visible: true
  learner_created: true
- name: src/account/management/dtos/EventDto.java
  visible: true
  learner_created: true
- name: src/account/management/controller/SecurityController.java
  visible: true
  learner_created: true
- name: src/account/management/AuthenticationFailureEventListener.java
  visible: true
  learner_created: true
- name: src/account/management/exceptions/BlockAdministratorException.java
  visible: true
  learner_created: true
- name: src/account/management/dtos/UserLockDTO.java
  visible: true
  learner_created: true
- name: src/account/management/dtos/ChangeUserLockedStatusDTO.java
  visible: true
  learner_created: true
- name: src/account/management/service/AuthAttemptService.java
  visible: true
  learner_created: true
- name: src/account/management/exceptions/UserLockedException.java
  visible: true
  learner_created: true
- name: src/account/management/AuthenticationSuccessEventListener.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 26 Feb 2022 04:25:31 UTC
record: 4
